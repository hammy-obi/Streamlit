# -*- coding: utf-8 -*-
"""Fashion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LwRsGkk-1SL0Xhlb5dnAcbZ6V3qclQ0Z
"""

import pandas as pd
import numpy as np

fashion_train_df = pd.read_csv('fashion-mnist_train.csv')

fashion_train_df.head()

fashion_test_df = pd.read_csv('fashion-mnist_test.csv')

fashion_train_df.head()

fashion_test_df

fashion_test_df.info()

fashion_train_df.info()

fashion_train = fashion_train_df.values
fashion_test = fashion_test_df.values

fashion_train

fashion_train.shape

fashion_test.shape

import matplotlib.pyplot as plt

grid_width = 15
grid_height = 15

fig, axes = plt.subplots(grid_height, grid_width, figsize=(25, 25))
axes = axes.ravel()

for i in np.arange(0, grid_height * grid_width):
    # Draft random index to get random image.
    index = np.random.randint(0, fashion_train.shape[0])
    axes[i].imshow(fashion_train[index, 1:].reshape(28, 28), cmap='gray')
    # Show image class label above the drafted image.
    axes[i].set_title("Class: " + str(fashion_train[index, 0]), fontsize=8)
    axes[i].axis('off')
plt.subplots_adjust(hspace=0.4)

X_train = fashion_train[:, 1:]
y_train = fashion_train[:, 0]
X_test = fashion_test[:, 1:]
y_test = fashion_test[:, 0]

X_train = X_train/255
X_test = X_test/255

X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)

X_train.shape

X_test.shape

import tensorflow as tf
from tensorflow import keras
from keras import layers

from keras import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten

from keras.layers import BatchNormalization, Dropout

network = Sequential()
network.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
network.add(MaxPooling2D((2, 2)))
network.add(BatchNormalization())
network.add(Conv2D(64, (3, 3), activation='relu'))
network.add(MaxPooling2D((2, 2)))
network.add(BatchNormalization())
network.add(Conv2D(128, (3, 3), activation='relu'))
network.add(MaxPooling2D((2, 2)))

network.add(Flatten())
network.add(Dense(128, activation='relu'))
network.add(Dropout(0.25))
network.add(Dense(64, activation='relu'))
network.add(Dropout(0.25))
network.add(Dense(32, activation='relu'))
network.add(Dense(10, activation='softmax'))

network.summary()

network.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = network.fit(X_train, y_train, epochs=10, validation_split=0.2)

network.evaluate(X_test, y_test)

y_pred = network.predict(X_test)

y_pred

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')

y_pred_classes = np.argmax(y_pred, axis=1)

y_pred_classes

# Grid dimensions.
grid_height = 15
grid_width = 15

fig, axes = plt.subplots(grid_height, grid_width, figsize=(25, 25))
axes = axes.ravel()

for i in range(grid_height * grid_width):
    # Draft random index to plot random image.
    drafted_image = np.random.randint(0, X_test.shape[0])
    axes[i].imshow(X_test[drafted_image].reshape(28, 28), cmap='gray')
    # Print actual and predicted labels for image.
    axes[i].set_title("Actual class: {:0.1f}\nPredicted class: {:0.1f}".format(
        y_test[drafted_image], y_pred_classes[drafted_image]), fontsize=8)
    axes[i].axis('off')
plt.subplots_adjust(hspace=0.8)